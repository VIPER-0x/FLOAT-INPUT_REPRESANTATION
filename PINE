//@version=6
indicator('Decimal Digits Calculation', shorttitle = 'DDC', overlay = true)

// Function to calculate the number of decimal digits
f_get_decimal_digits(_in) =>
    n = 0
    s = str.tostring(_in)
    p = str.pos(s, '.')
    if na(p)
        n := 0
    else
        n := str.length(str.substring(s, p + 1))
    n

// Function to multiply the input by 10^number_of_digits and remove the radix point
f_multiply_and_remove_radix(_in, num_digits) =>
    _multiplied = _in * math.pow(10, num_digits)
    _multiplied

// Function to get the integer part of a number
f_get_integer_part(_in) =>
    math.floor(_in)

// Function to get the decimal part of a number
f_get_decimal_part(_in) =>
    _int_part = math.floor(_in)
    _dec_part = _in - _int_part
    _dec_part

// Function to calculate the number of integer digits
f_get_integer_digits(_in) =>
    _in_abs = math.abs(_in)
    _in_abs < 1 ? 1 : math.floor(math.log10(_in_abs)) + 1

// Input variable for the close price
var float input = close

// Calculate the number of decimal digits
num_digits = f_get_decimal_digits(input)

// Multiply by 10^number_of_digits and remove radix point
multiplied_value = f_multiply_and_remove_radix(input, num_digits)

// Get the integer part
integer_part = f_get_integer_part(input)

// Get the decimal part
decimal_part = f_get_decimal_part(input)

// Calculate the number of integer digits
integer_digits = f_get_integer_digits(input)

// Create a table to display the results
var table results_table = table.new(position.bottom_center, 7, 2, border_width = 1, bgcolor = color.gray)

// Table header
if bar_index == 0
    table.cell(results_table, 0, 0, 'Description', bgcolor = color.blue, text_color = color.white, text_size = size.large)
    table.cell(results_table, 0, 1, 'Value', bgcolor = color.blue, text_color = color.white, text_size = size.large)

// Update table content
if barstate.islast
    table.cell(results_table, 1, 0, 'Input', bgcolor = color.rgb(0, 0, 0), text_color = color.rgb(255, 255, 255), text_size = size.normal)
    table.cell(results_table, 1, 1, str.tostring(input), bgcolor = color.rgb(0, 15, 68), text_color = color.rgb(255, 255, 255), text_size = size.normal)

    table.cell(results_table, 2, 0, 'Decimal Digits', bgcolor = color.rgb(0, 0, 0), text_color = color.rgb(255, 255, 255), text_size = size.normal)
    table.cell(results_table, 2, 1, str.tostring(num_digits), bgcolor = color.rgb(0, 0, 0), text_color = color.rgb(255, 255, 255), text_size = size.normal)

    table.cell(results_table, 3, 0, 'Multiplied Value', bgcolor = color.rgb(0, 0, 0), text_color = color.rgb(255, 255, 255), text_size = size.normal)
    table.cell(results_table, 3, 1, str.tostring(multiplied_value), bgcolor = color.rgb(0, 0, 0), text_color = color.rgb(255, 255, 255), text_size = size.normal)

    table.cell(results_table, 4, 0, 'Integer Part', bgcolor = color.rgb(255, 204, 0), text_color = color.black, text_size = size.normal)
    table.cell(results_table, 4, 1, str.tostring(integer_part), bgcolor = color.rgb(0, 0, 0), text_color = color.rgb(255, 255, 255), text_size = size.normal)

    table.cell(results_table, 5, 0, 'Decimal Part', bgcolor = color.rgb(0, 37, 169), text_color = color.rgb(255, 255, 255), text_size = size.normal)
    table.cell(results_table, 5, 1, str.tostring(decimal_part), bgcolor = color.rgb(0, 0, 0), text_color = color.rgb(255, 255, 255), text_size = size.normal)

    table.cell(results_table, 6, 0, 'Integer Digits', bgcolor = color.rgb(0, 0, 0), text_color = color.rgb(255, 255, 255), text_size = size.normal)
    table.cell(results_table, 6, 1, str.tostring(integer_digits), bgcolor = color.rgb(0, 0, 0), text_color = color.rgb(255, 255, 255), text_size = size.normal)
